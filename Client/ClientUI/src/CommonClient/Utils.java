package CommonClient;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Utils {
    /**
     * A list of department reports that can be generated by the department manager.
     */
    public static final String[] departmentReports = new String[]{"Visitations Statistics", "Cancellations Statistics"};

    /**
     * A map of department reports and their corresponding report types.
     * The key is the report name and the value is the report type.
     * The report type is used to identify the report in the server.
     */
    public static Map<String, String> departmentReportsMap = new HashMap<String, String>() {{
        put("Visitations Statistics", "visitations");
        put("Cancellations Statistics", "cancellations");
    }};

    /**
     * A map of park manager reports and their corresponding report types.
     * The key is the report name and the value is the report type.
     * The report type is used to identify the report in the server.
     */
    public static Map<String, String> parkManagerReportsMap = new HashMap<String, String>() {{
        put("Number of Visitors Statistics", "numofvisitors");
        put("Capacity Statistics", "usage");
    }};

    /**
     * Converts the name of a month into its corresponding numerical representation.
     * <p>
     * This method parses a month name (e.g., "January", "February", etc.) and converts it into
     * its numerical order in the calendar year, with January being 1 and December being 12.
     * The method is case-sensitive and expects the full name of the month in English.
     *
     * @param monthName The full name of the month (e.g., "March"), case-sensitive, in English.
     * @return The numerical representation of the month (e.g., 3 for March).
     * @throws ParseException If the given month name is not recognized or cannot be parsed,
     *                        indicating that the input does not correspond to a valid month name.
     *                        <p>
     *                        Usage of this method is particularly useful in scenarios where month names are received
     *                        as text input and need to be converted into numerical form for date calculations or
     *                        formatting purposes.
     */
    public static int getNumberFromMonthName(String monthName) throws ParseException {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new SimpleDateFormat("MMMM", Locale.ENGLISH).parse(monthName));
        return cal.get(Calendar.MONTH) + 1;
    }

    /**
     * Validates if the provided ID string meets the specified criteria for validity. An ID is considered valid if it
     * is exactly 9 characters in length and consists solely of digits.
     *
     * @param ID The string representing the ID to be validated.
     * @return {@code Boolean} - {@code true} if the ID is valid based on the defined criteria, otherwise {@code false}.
     * <p>
     * The validation process involves two primary checks:
     * 1. The ID must not be {@code null}, ensuring that a valid string object is provided for validation.
     * 2. The length of the ID string must be exactly 9 characters to match the expected format.
     * 3. Each character in the ID string must be a digit, ensuring no alphabetical or special characters are included.
     * <p>
     * This method is particularly useful in scenarios requiring validation of identification numbers or similar
     * strings where a specific format is expected for data integrity and consistency purposes.
     */
    public static Boolean isIDValid(String ID) {
        // Check if the string length is exactly 9 characters
        if (ID == null) {
            return false;
        }
        if (ID.length() != 9) {
            return false;
        }

        // Check if each character is a digit
        return checkContainsDigitsOnly(ID);
    }

    /**
     * Checks if a given string consists only of digit characters. This method iterates through
     * each character of the string, verifying that each character is a digit as defined by
     * the {@link Character#isDigit(char)} method.
     *
     * @param str The string to be checked.
     * @return {@code Boolean} - {@code true} if the string contains only digits; {@code false} otherwise.
     * <p>
     * This utility method is useful for validating input where numeric data is expected in a string format,
     * ensuring that the string does not contain any non-digit characters such as letters or special symbols.
     */
    public static Boolean checkContainsDigitsOnly(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Converts a date and time string to a {@link Timestamp} object.
     *
     * @param date The date string in ISO local date format.
     * @param time The time string in 24-hour format.
     * @return A {@link Timestamp} representing the combined date and time.
     */


    public static boolean isOrderTimeValid(String date, String time) {

        // Combine Date and Time Strings
        String dateTimeString = date + "T" + time;
        // Format of the date-time string
        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

        // Parse the date-time string
        LocalDateTime dateTime = LocalDateTime.parse(dateTimeString, formatter);

        // Get the current date-time
        LocalDateTime now = LocalDateTime.now();

        // Calculate the duration between the given date-time and now
        Duration duration = Duration.between(now, dateTime);

        // Check if the duration is more than 24 hours
        return duration.toMinutes() <= 1440;
    }

    /**
     * Generates a list of time slots for the time selection combo box.
     * Time slots range from the provided start and end parameters.
     *
     * @param start The start time of the time slots.
     * @param end   The time slots will start from this time.
     */
    public static ObservableList<String> setComboBoxHours(int start, int end) {
        ArrayList<String> al = new ArrayList<String>();
        for (int i = start; i <= end; i++) {
            if (i < 10) {
                al.add("0" + i + ":00");
            } else {
                al.add("" + i + ":00");
            }
        }
        return FXCollections.observableArrayList(al);
    }
}
